{"posts":{"1":{"id":0,"title":"Continuous deployement with Github, Travis and Heroku for Node.js","date":"2013-02-18T19:01:23.000Z","updated":"2013-02-19T01:28:31.000Z","categories":[],"tags":[1,2,3,4],"comments":true,"layout":"post","content":"<p>Cloud services helps the developer to focus on the code. In one or two commands you get a running server, a CI engine, <em>etc</em>.</p>\n<p>I wont present you Gihtub, Travis or Heroku, if you&#39;re not aware of them, just check their websites!</p>\n<h1>Prerequisites</h1>\n<p>You need the following to be installed on your machine:</p>\n<ul>\n<li>the <a href=\"https://toolbelt.heroku.com/\">Heroku toolbelt</a>.</li>\n<li>the <a href=\"https://rubygems.org/\">RubyGem</a> tool.</li>\n</ul>\n<h1>Setting all this up</h1>\n<p>First of all, you have to get your auth token from Heroku :</p>\n<pre><code>token=<span class=\"char\">$(</span>heroku <span class=\"method\">auth:</span>token)\n</code></pre>\n\n<p>This will store the token, and keep it for later.</p>\n<p>Then, install the Travis CLI tool:</p>\n<pre><code>su<span class=\"operator\"><span class=\"keyword\">do</span> gem install travis\n</code></pre>\n\n<p>You now have the Travis CLI tool installed. This will help you to encrypt your Heroku token.</p>\n<pre><code><span class=\"title\">travis</span> encrypt HEROKU_API_KEY=<span class=\"variable\">$token</span> --add\n</code></pre>\n\n<p>Running the above command will add your encrypted token to your <code>.travis.yml</code>.</p>\n<p>Open it and you should see something like this:</p>\n<pre><code><span class=\"method\">env:</span> \n  <span class=\"method\">global:</span> \n  - <span class=\"method\">secure:</span> <span class=\"class\">YOUR_ENCRYPTED_TOKEN</span>\n</code></pre>\n\n<p>Travis will decrypt it during the build, and be able to authenticate itself with Heroku.</p>\n<h1>Plug the pipe between Travis and Heroku</h1>\n<p>Now you need to tell Travis to deploy your app to Heroku after a succesful build.</p>\n<p>Luckily, Travis can handle it through its <a href=\"http://about.travis-ci.org/docs/user/build-configuration/#Build-Lifecycle\">build lifecycle</a>.</p>\n<p>Just add the following to your <code>.travis.yml</code> (don&#39;t forget to <strong>replace</strong> HEROKU_APP_NAME!):</p>\n<pre><code><span class=\"label\">after_success:</span>\n  - wget -qO- https://toolbelt<span class=\"preprocessor\">.heroku</span><span class=\"preprocessor\">.com</span>/install-ubuntu<span class=\"preprocessor\">.sh</span> | sh\n  - git remote <span class=\"keyword\">add</span> heroku git@heroku<span class=\"preprocessor\">.com</span>:HEROKU_APP_NAME<span class=\"preprocessor\">.git</span>\n  - echo <span class=\"string\">\"Host heroku.com\"</span> &gt;&gt; ~/<span class=\"preprocessor\">.ssh</span>/config\n  - echo <span class=\"string\">\"   StrictHostKeyChecking no\"</span> &gt;&gt; ~/<span class=\"preprocessor\">.ssh</span>/config\n  - echo <span class=\"string\">\"   CheckHostIP no\"</span> &gt;&gt; ~/<span class=\"preprocessor\">.ssh</span>/config\n  - echo <span class=\"string\">\"   UserKnownHostsFile=/dev/null\"</span> &gt;&gt; ~/<span class=\"preprocessor\">.ssh</span>/config\n  - yes | heroku keys:<span class=\"keyword\">add</span>\n  - yes | git <span class=\"keyword\">push</span> heroku master\n</code></pre>\n<p>This will install the Heroku toolbelt, and then configure your Travis worker to communicate with Heroku and finally push your code to it!</p>\n<p>And you&#39;re done! Now everytime you push your code to Github, Travis will build/test it and deploy it to Heroku!</p>\n<p>Here is the whole <code>.travis.yml</code>:</p>\n<pre><code>--- \n<span class=\"label\">language:</span> node_js\n<span class=\"label\">env:</span> \n  global: \n  - secure: YOUR_ENCRYPTED_TOKEN\n<span class=\"label\">after_success:</span>\n  - wget -qO- https://toolbelt<span class=\"preprocessor\">.heroku</span><span class=\"preprocessor\">.com</span>/install-ubuntu<span class=\"preprocessor\">.sh</span> | sh\n  - git remote <span class=\"keyword\">add</span> heroku git@heroku<span class=\"preprocessor\">.com</span>:HEROKU_APP_NAME<span class=\"preprocessor\">.git</span>\n  - echo <span class=\"string\">\"Host heroku.com\"</span> &gt;&gt; ~/<span class=\"preprocessor\">.ssh</span>/config\n  - echo <span class=\"string\">\"   StrictHostKeyChecking no\"</span> &gt;&gt; ~/<span class=\"preprocessor\">.ssh</span>/config\n  - echo <span class=\"string\">\"   CheckHostIP no\"</span> &gt;&gt; ~/<span class=\"preprocessor\">.ssh</span>/config\n  - echo <span class=\"string\">\"   UserKnownHostsFile=/dev/null\"</span> &gt;&gt; ~/<span class=\"preprocessor\">.ssh</span>/config\n  - yes | heroku keys:<span class=\"keyword\">add</span>\n  - yes | git <span class=\"keyword\">push</span> heroku master\n<span class=\"label\">node_js:</span> \n- <span class=\"number\">0.8</span>\n</code></pre>\n","excerpt":4461,"source":"_posts/continuous-deployement-with-github-travis-and-heroku-for-node.js.md","slug":"continuous-deployement-with-github-travis-and-heroku-for-node.js","ctime":"2013-02-19T01:28:31.000Z","mtime":"2013-02-19T01:28:31.000Z"},"2":{"id":0,"title":"Processing and GPIOs on Raspberry Pi","date":"2013-04-24T09:49:12.000Z","updated":"2013-04-24T11:33:39.000Z","categories":[],"tags":[7,8,9],"comments":true,"layout":"post","content":"<p>Hello,</p>\n<p><a href=\"http://www.processing.org/\">Processing</a> is a nice <em>programming language</em> for creative coding, and you can physically interact with the <a href=\"http://www.raspberrypi.org/\">Raspberry Pi</a> thanks to its GPIOs. So why not combining them?</p>\n<p>Let&#39;s do it.</p>\n<h1>Prerequisites</h1>\n<ul>\n<li>A Raspberry Pi (<em>sic</em>!) running with a Raspbian image (it may work on other configurations, but not tested).</li>\n<li>All command line below are executed from the home directory (i.e. <code>/home/pi/</code> for the pi user).</li>\n<li>You may need to install some tools <code>sudo apt-get install unzip ca-certificates</code>.</li>\n</ul>\n<h1>Install Oracle JDK8 on the Raspberry Pi</h1>\n<p>The idea of installing JDK8 is not to enjoy those long awaited Lambdas, but to provide the execution platform for Processing. Luckily, Oracle started to provide builds of the JDK for the arm platform.</p>\n<p>Download the JDK.</p>\n<pre><code>wget --no-check-certificate http:<span class=\"comment\">//www.java.net/download/JavaFXarm/jdk-8-ea-b36e-linux-arm-hflt-29_nov_2012.tar.gz</span>\n</code></pre>\n\n<p>Untar the binaries at the right place.</p>\n<pre><code>sudo mkdir -p /opt/java\ntar xvzf jdk-<span class=\"number\">8</span>-ea-b36e-linux-arm-hflt-<span class=\"number\">29</span>_nov_2012.tar.gz\nsudo mv jdk1<span class=\"number\">.8</span><span class=\"number\">.0</span> /opt/java\n</code></pre>\n\n<p>Then, you must tell raspbian to use these binaries to provide <code>java</code>.</p>\n<pre><code>sudo update-alternatives --install <span class=\"string\">\"/usr/bin/java\"</span> <span class=\"string\">\"java\"</span> <span class=\"string\">\"/opt/java/jdk1.8.0/bin/java\"</span> <span class=\"number\">1</span>\n</code></pre>\n\n<p>If you already had another <code>java</code> version installed, you may need to choose the one we just installed, if not you can skip this.</p>\n<pre><code>sudo update-alternatives --config java\n</code></pre>\n\n<p>And choose the JDK8 by entering the corresponding number.</p>\n<p>Now you need to define some environment variables for <code>java</code> to run properly.</p>\n<pre><code>echo export JAVA_HOME=<span class=\"string\">\"/opt/java/jdk1.8.0\"</span> &gt;&gt; .bashrc\necho export PATH=$PATH:$JAVA_HOME/bin &gt;&gt; .bashrc\nsource .bashrc\n</code></pre>\n\n<p>It will add the environment variables at the end of your <code>.bashrc</code>. If you use <code>zsh</code> (and you should! with <a href=\"https://github.com/robbyrussell/oh-my-zsh\">oh-my-zsh</a>), just replace <code>.bashrc</code> with <code>.zshrc</code> in the three lines of code above.</p>\n<p>Java is now installed, and you can check it with <code>java -version</code>. It should display something like this:</p>\n<pre><code>java version <span class=\"string\">\"1.8.0-ea\"</span>\nJava(TM) SE Runtime Environment (build <span class=\"number\">1.8</span><span class=\"number\">.0</span>-ea-b36e)\nJava HotSpot(TM) Client VM (build <span class=\"number\">25.0</span>-b04, mixed mode)\n</code></pre>\n\n<p>Also check the environment variables, it should return something.</p>\n<pre><code>echo $JAVA_HOME | grep /opt/java/jdk1<span class=\"number\">.8</span><span class=\"number\">.0</span>\necho $PATH | grep /opt/java/jdk1<span class=\"number\">.8</span><span class=\"number\">.0</span>/bin\n</code></pre>\n\n<p>If those checks are not ok, something went wrong, feel free to drop a comment.</p>\n<h1>Install Processing</h1>\n<p>The long awaited 2.0 final version is still not here (at the time of writing), but you can download the last beta.</p>\n<pre><code>wget http:<span class=\"comment\">//processing.googlecode.com/files/processing-2.0b8-linux32.tgz</span>\n</code></pre>\n\n<p>Notice we&#39;ll use a x86 version, no worries we&#39;ll deal with it.</p>\n<p>Untar it</p>\n<pre><code>tar xvzf processing-<span class=\"number\">2.0</span>b8-linux32.tgz\n</code></pre>\n\n<p>Java is bundled with Processing, so we need to tell it to use the java version we installed rather than the bundled one. To do that, we&#39;ll remove the java folder inside processing and replace this folder with a symbolic link to the java version we installed.</p>\n<pre><code>rm -rf processing-<span class=\"number\">2.0</span>b8/java\nln -s $JAVA_HOME processing-<span class=\"number\">2.0</span>b8/java\n</code></pre>\n\n<p>Processing is now installed! You can now log in the UI of the Raspberry (if not already) and run processing from the terminal with the following:</p>\n<pre><code>cd ~/processing-<span class=\"number\">2.0</span>b8;./processing\n</code></pre>\n\n<p>You&#39;ll have to wait a little bit to see the UI coming up.</p>\n<p>You may notice some error messages in the terminal, but so far it had no incidence for me, so I ignore them.</p>\n<h1>Install a library to interact with GPIOs</h1>\n<p>So far, I haven&#39;t found any Processing <em>ready</em> library, so I&#39;ll use the <a href=\"http://pi4j.com/\">Pi4J</a> java library.</p>\n<p>Processing has a particular way to handle library, you need to have a special structure in the folders. And Pi4J is not packaged according to the Processing convention. So you&#39;ll need to re-arrange stuff (see <a href=\"http://wiki.processing.org/w/How_to_Install_a_Contributed_Library\">http://wiki.processing.org/w/How_to_Install_a_Contributed_Library</a>).</p>\n<p>First, go back to the <code>/home/pi</code> folder in the terminal.</p>\n<p>Then download the Pi4J lib and unzip it:</p>\n<pre><code>wget https:<span class=\"comment\">//pi4j.googlecode.com/files/pi4j-0.0.5.zip</span>\nunzip pi4j-<span class=\"number\">0.0</span><span class=\"number\">.5</span>.zip\n</code></pre>\n\n<p>Since Processing is not happy when a lib have something else than letters and numbers in the lib name, you need to rename the unzipped folder.</p>\n<pre><code>mv pi4j-<span class=\"number\">0.0</span><span class=\"number\">.5</span> pi4j\n</code></pre>\n\n<p>Then you need to re-arrange files to stick with the Processing convention.</p>\n<pre><code>mv pi4j/lib pi4j/library\nmv pi4j/library/pi4j-core.jar pi4j/library/pi4j.jar\n</code></pre>\n\n<p>Now you can put the lib in the Processing library folder (defaults to <code>~/sketchbook/libraries</code>).</p>\n<pre><code>mv pi4j sketchbook/libraries\n</code></pre>\n\n<p>Done! You can now import Pi4J in your Processing sketch!</p>\n<h1>Getting started with Pi4J</h1>\n<p>Here is a simple skecth which will add an ellipse every time a button is pressed.</p>\n<pre><code><span class=\"keyword\">import</span> com.pi4j.io.gpio.GpioController;\n<span class=\"keyword\">import</span> com.pi4j.io.gpio.GpioFactory;\n<span class=\"keyword\">import</span> com.pi4j.io.gpio.GpioPinDigitalInput;\n<span class=\"keyword\">import</span> com.pi4j.io.gpio.PinPullResistance;\n<span class=\"keyword\">import</span> com.pi4j.io.gpio.RaspiPin;\n\n<span class=\"keyword\">int</span> WIDTH = <span class=\"number\">1280</span>;\n<span class=\"keyword\">int</span> HEIGHT = <span class=\"number\">1024</span>;\nGpioController gpio;\nGpioPinDigitalInput button;\n\n<span class=\"keyword\">void</span> setup() {\n\tsize(WIDTH, HEIGHT);\n\tgpio = GpioFactory.getInstance();\n\tbutton = gpio.provisionDigitalInputPin(RaspiPin.GPIO_02, PinPullResistance.PULL_DOWN);\n}\n\n<span class=\"keyword\">void</span> draw() {\n\t<span class=\"keyword\">if</span> (button.isHigh()) {\n\t\tprintln(<span class=\"string\">\"pressed\"</span>);\n\t\tfill(<span class=\"keyword\">int</span>(random(<span class=\"number\">255</span>)), <span class=\"keyword\">int</span>(random(<span class=\"number\">255</span>)), <span class=\"keyword\">int</span>(random(<span class=\"number\">255</span>)));\n\t\t<span class=\"keyword\">float</span> x = random(WIDTH);\n\t\t<span class=\"keyword\">float</span> y = random(HEIGHT);\n\t\tellipse(x, y, <span class=\"number\">80</span>, <span class=\"number\">80</span>);\n\t};\n}\n</code></pre>\n\n<p>I invite you to read the Pi4J documentation to dive into it. You should use events rather than testing the state of a button as shown above (see <a href=\"http://pi4j.com/example/listener.html\">http://pi4j.com/example/listener.html</a>).</p>\n<p>Here is the wiring schema that comes along the sketch from above (borrowed from <a href=\"http://pi4j.com/\">http://pi4j.com/</a>).\n<img src=\"http://pi4j.com/images/gpio-listener-example.png\" alt=\"\"></p>\n<p>If you try to run it, you&#39;ll face some permission issues since Pi4J require root privileges to access GPIOs. For now I export the application and run it with <code>sudo</code> to bypass it. It should exist a cleaner way to handle it. I&#39;ll update this post with a proper solution if there is.</p>\n<p>You are ready to poop some creative code! Enjoy!</p>\n","excerpt":8498,"source":"_posts/processing-and-gpios-on-raspberry-pi.md","slug":"processing-and-gpios-on-raspberry-pi","ctime":"2013-04-24T11:33:39.000Z","mtime":"2013-04-24T11:33:39.000Z"},"3":{"id":0,"title":"Use bower with heroku","date":"2013-02-18T14:33:26.000Z","updated":"2013-02-18T16:25:54.000Z","categories":[],"tags":[5,2,6],"comments":true,"layout":"post","content":"<p>Hello!</p>\n<p><a href=\"http://twitter.github.com/bower/\">Bower</a> is pretty awsome! <a href=\"http://www.heroku.com/\">Heroku</a> too!</p>\n<p>Use them together!</p>\n<p>Without creating your own Heroku <a href=\"https://devcenter.heroku.com/articles/buildpacks\">buildpack</a>, you can achieve that quite easily.</p>\n<p>Just add a dependency to Bower in your <code>package.json</code> and then rely on the <code>npm scripts</code> to execute a <code>postinstall</code> command (<a href=\"https://npmjs.org/doc/scripts.html\">https://npmjs.org/doc/scripts.html</a>).</p>\n<p>So you&#39;ll end up with somthing like this in your <code>package.json</code>:</p>\n<pre><code><span class=\"string\">\"dependencies\"</span>: {\n    <span class=\"string\">\"bower\"</span>: <span class=\"string\">\"0.6.x\"</span>\n},\n<span class=\"string\">\"scripts\"</span>: {\n    <span class=\"string\">\"postinstall\"</span>: <span class=\"string\">\"./node_modules/bower/bin/bower install\"</span>\n}\n</code></pre>\n\n<p>And that&#39;s it! Heroku will run a <code>npm install</code> that will execute the <code>bower install</code>.</p>\n<p><em>Pros:</em> one command to rule them all.</p>\n<p><em>Cons:</em> you unnecessarily embed bower as a dependency.</p>\n","excerpt":1205,"source":"_posts/use-bower-with-heroku.md","slug":"use-bower-with-heroku","ctime":"2013-02-18T16:25:54.000Z","mtime":"2013-02-18T16:25:54.000Z"},"4":{"id":0,"title":"Quality analysis on Node.js projects with Mocha, Istanbul and Sonar","date":"2013-04-25T08:38:41.000Z","updated":"2013-06-25T13:36:12.000Z","categories":[],"tags":[2,10,11,12],"comments":true,"layout":"post","content":"<p>Hello,</p>\n<p>What about having a nice dashboard for the code quality of your project? <a href=\"http://www.sonarsource.org\">Sonar</a> is a well known open source tool to handle that.</p>\n<p>It handles a wide range of programming languages, from COBOL to Javascript. So let&#39;s give a try to run Sonar on Node.js projects!</p>\n<h1>Prerequisites</h1>\n<ul>\n<li>I will cover the use of Sonar with <a href=\"http://visionmedia.github.io/mocha/\">Mocha</a> and <a href=\"https://github.com/gotwarlost/istanbul\">Istanbul</a>, my tools of choice when it comes to js testing. But if you are able to generate xunit ans lcov reports from your test suite, chances the stuff I describe here will also work.</li>\n<li>You need to install Sonar : <a href=\"http://docs.codehaus.org/display/SONAR/Installation+and+Upgrade\">http://docs.codehaus.org/display/SONAR/Installation+and+Upgrade</a></li>\n<li>And the Sonar Javascript plugin : <a href=\"http://docs.codehaus.org/display/SONAR/JavaScript+Plugin\">http://docs.codehaus.org/display/SONAR/JavaScript+Plugin</a></li>\n<li>You&#39;ll also need Make : <a href=\"http://www.gnu.org/software/make/\">http://www.gnu.org/software/make/</a> which is the build tool I use for Node.js (we could use <a href=\"http://gruntjs.com/\">Grunt</a>, but I still need good arguments to switch to it for node.js, if you have some let me know!)</li>\n</ul>\n<h1>Testing with Mocha</h1>\n<p>Mocha has a lot of built-in functionalities and is extensible. We&#39;ll see this point will be really important. Because of its extensibility, you can output your tests results in various formats. If you don&#39;t know Mocha, you should give it a try!</p>\n<p>So far, Sonar only handles the xunit format as input, so you need a Mocha reporter that can handle it. There is a bundled reporter in Mocha that achieve that, but you need to pipe the console output to the xunit file by yourself. </p>\n<p>You could also use the following reporter plugin that does the work for you : <a href=\"https://github.com/peerigon/xunit-file\">https://github.com/peerigon/xunit-file</a></p>\n<p>So install it : <code>npm install xunit-file --save-dev</code> and then it&#39;s just a matter of setting an environment variable during the build to tell where to output the file.</p>\n<p>So the xunit task in my <code>Makefile</code> look like this :</p>\n<pre><code>xunit:\n\t<span class=\"variable\">@#</span> check <span class=\"keyword\">if</span> reports folder <span class=\"keyword\">exists</span>, <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> create it\n\t<span class=\"variable\">@test</span> -d reports || <span class=\"keyword\">mkdir</span> reports\n\tXUNIT_FILE=<span class=\"string\">\"reports/TESTS-xunit.xml\"</span> <span class=\"variable\">$(</span>MOCHA) -R xunit-file <span class=\"variable\">$(</span>TESTS)\n</code></pre>\n\n<p>Where <code>$(TESTS)</code> is the list of tests. Since I use a convention to name my tests (they always end with <code>.test.js</code>) I can retrieve them easily.</p>\n<pre><code><span class=\"setting\">TESTS=<span class=\"value\">$(shell find test/ -name <span class=\"string\">\"*.test.js\"</span>)</span></span>\n</code></pre>\n\n<p>And <code>$(MOCHA)</code> points to the mocha binary. I tend to install the tools I use inside the project rather than globally, it let me handle specific version of them for each project and gives the project some portability. But I don&#39;t know if it&#39;s a good practice or not. Feel free to drop a comment!</p>\n<pre><code><span class=\"setting\">MOCHA=<span class=\"value\">node_modules/.bin/mocha</span></span>\n</code></pre>\n\n<p>You may have noticed the weird name I gave to the xunit output file : <code>TESTS-xunit.xml</code>, it&#39;s really important it starts with <code>TESTS</code>! If not, you won&#39;t be able to gather tests metrics in Sonar. </p>\n<p>If you dig into the code of Sonar, here is why : <a href=\"https://github.com/SonarSource/sonar-java/blob/master/sonar-surefire-plugin/src/main/java/org/sonar/plugins/surefire/api/AbstractSurefireParser.java#L67\">https://github.com/SonarSource/sonar-java/blob/master/sonar-surefire-plugin/src/main/java/org/sonar/plugins/surefire/api/AbstractSurefireParser.java#L67</a></p>\n<p>You now have a test report ready to be consumed by Sonar (and Jenkins too if you want!).</p>\n<h1>Code coverage with Istanbul</h1>\n<p>Istanbul is the new cool kid when it comes to code coverage. And it is pretty simple to use! </p>\n<p><code>instabul cover myNodeCommand</code> will transparently add coverage info to the executed node command!</p>\n<p>Since <code>mocha</code> is a node command, everything is ok!</p>\n<p>You can just do the following</p>\n<pre><code><span class=\"comment\">_MOCHA=node_modules/</span>.<span class=\"comment\">bin/_mocha</span>\n<span class=\"comment\">coverage:</span>\n<span class=\"comment\">\t@#</span> <span class=\"comment\">check</span> <span class=\"comment\">if</span> <span class=\"comment\">reports</span> <span class=\"comment\">folder</span> <span class=\"comment\">exists</span>, <span class=\"comment\">if</span> <span class=\"comment\">not</span> <span class=\"comment\">create</span> <span class=\"comment\">it</span>\n<span class=\"comment\">\t@test</span> <span class=\"literal\">-</span><span class=\"comment\">d</span> <span class=\"comment\">reports</span> <span class=\"comment\">||</span> <span class=\"comment\">mkdir</span> <span class=\"comment\">reports</span>\n<span class=\"comment\">\t$(ISTANBUL)</span> <span class=\"comment\">cover</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">report</span> <span class=\"comment\">lcovonly</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">dir</span> <span class=\"string\">.</span><span class=\"comment\">/reports</span> <span class=\"comment\">$(_MOCHA)</span> <span class=\"literal\">-</span><span class=\"literal\">-</span> <span class=\"literal\">-</span><span class=\"comment\">R</span> <span class=\"comment\">spec</span> <span class=\"comment\">$(TESTS)\n</code></pre>\n\n<p>Just note the double dash to distinguish <code>istanbul</code> args from the <code>mocha</code> ones and the use of <code>_mocha</code> internal executable (see <a href=\"https://github.com/gotwarlost/istanbul/issues/44\">istanbul/issues/44</a>).</p>\n<p>If you need to produce some other report formats (html, cobertura, etc.), you can check the <a href=\"https://github.com/gotwarlost/istanbul#the-report-command\">report options</a>.</p>\n<h1>Sonar</h1>\n<p>Sonar analysis can be performed in various ways (ant, maven, sonar-runner). Even if i do like maven (yes I do!), there&#39;s no way I&#39;ll put a <code>pom.xml</code> in a node.js project.</p>\n<p>We&#39;ll use the <a href=\"http://docs.codehaus.org/display/SONAR/Analyzing+with+Sonar+Runner\">sonar-runner</a>. </p>\n<p>Download it : <a href=\"http://docs.codehaus.org/display/SONAR/Installing+and+Configuring+Sonar+Runner\">http://docs.codehaus.org/display/SONAR/Installing+and+Configuring+Sonar+Runner</a>. But, for the sake of portability I prefer to embed it in my project rather than installing it (again, I don&#39;t know if it&#39;s a good practice, but it&#39;s mine).</p>\n<p>Then, you need to configure a file at the root of your project that will drive the sonar analysis : <code>sonar-project.properties</code>. This file is really simple, it just tells Sonar where to find the reports we produced before and provide some general info about the project (see <a href=\"http://docs.codehaus.org/display/SONAR/JavaScript+Plugin\">http://docs.codehaus.org/display/SONAR/JavaScript+Plugin</a>).</p>\n<pre><code>sonar<span class=\"variable\">.projectKey</span>=sonar-js\nsonar<span class=\"variable\">.projectName</span>=sonar-js\nsonar<span class=\"variable\">.projectVersion</span>=<span class=\"number\">0.0</span><span class=\"number\">.1</span>\n \nsonar<span class=\"variable\">.sources</span>=src\nsonar<span class=\"variable\">.tests</span>=test\nsonar<span class=\"variable\">.language</span>=js\nsonar<span class=\"variable\">.profile</span>=node\n\nsonar<span class=\"variable\">.dynamicAnalysis</span>=reuseReports\n\nsonar<span class=\"variable\">.javascript</span><span class=\"variable\">.jstest</span><span class=\"variable\">.reportsPath</span>=reports\nsonar<span class=\"variable\">.javascript</span><span class=\"variable\">.lcov</span><span class=\"variable\">.reportPath</span>=reports/coverage<span class=\"variable\">.lcov</span>\n</code></pre>\n\n<p>The file speaks by itself: project info, project directory structure and tell Sonar to reuse already generated reports and where they are.</p>\n<p>Please note that i use a custom profile which is a set of coding rules my code will be tested against. If you don&#39;t have this profile on your Sonar instance, you should delete the <code>sonar.profile=node</code>. Your code will be then tested against the default js profile, which is not really adapted for node.js. I&#39;ll come back on that.</p>\n<p>So after you have the xunit and lcov file, you can run Sonar.</p>\n<p>Here is my task in the <code>Makefile</code>:</p>\n<pre><code>sonar:\n\t<span class=\"variable\">@#</span> add the sonar sonar-runner executable to the PATH <span class=\"keyword\">and</span> run it\n\tPATH=<span class=\"string\">\"<span class=\"variable\">$$</span>PWD/tools/sonar-runner-2.2/bin:<span class=\"variable\">$$</span>PATH\"</span> sonar-runner\n</code></pre>\n\n<p>That&#39;s it!</p>\n<p>Please note that the actual configuration in sonar-project.properties assumes the Sonar server is running on <a href=\"http://localhost:9000\">http://localhost:9000</a>.</p>\n<p>You can change that by specifying the right values in sonar-project.properties (see <a href=\"http://docs.codehaus.org/display/SONAR/Analysis+Parameters\">http://docs.codehaus.org/display/SONAR/Analysis+Parameters</a>).</p>\n<p>You can now browse your Sonar dashboard and see this nice report:</p>\n<p><img src=\"https://dl.dropboxusercontent.com/u/17657227/Info/blog/dashboard.png\" alt=\"\"></p>\n<p>In a glance, you can see the wealth of your project : tests results, code coverage, coding rules compliance, complexity, etc...</p>\n<p>You can then drill down in any metrics, to see where are the coding rules violations, which line is covered or not, etc. Just read about Sonar to see how powerful it is. You can even see how the metrics evolve between two analysis!</p>\n<p>Here is an example of code coverage report:</p>\n<p><img src=\"https://dl.dropboxusercontent.com/u/17657227/Info/blog/coverage-dd.png\" alt=\"\"></p>\n<p>You can find a dummy project on github that covers the ideas of this blog post : <a href=\"https://github.com/xseignard/sonar-js\">https://github.com/xseignard/sonar-js</a></p>\n<h1>Notes</h1>\n<p>I use a custom quality profile in Sonar for Node.js (you can find it here: <a href=\"https://github.com/xseignard/sonar-js/blob/master/tools/node_js.xml\">https://github.com/xseignard/sonar-js/blob/master/tools/node_js.xml</a>).</p>\n<p>You can install it following the docs: <a href=\"http://docs.codehaus.org/display/SONAR/Quality+profiles#QualityProfiles-BackupingRestoringProfile\">http://docs.codehaus.org/display/SONAR/Quality+profiles#QualityProfiles-BackupingRestoringProfile</a></p>\n<p>My profile is far from ideal, and can be discussed.</p>\n<p>As I told you at the beginning, if you can generate xunit and lcov formats, you&#39;re good! So you can easily apply this technique to Angular projects, because of the mighty <a href=\"http://karma-runner.github.io/\">Karma runner</a>, see :</p>\n<ul>\n<li>the reporters section in <a href=\"http://karma-runner.github.io/0.8/config/configuration-file.html\">http://karma-runner.github.io/0.8/config/configuration-file.html</a></li>\n<li>the coverage page <a href=\"http://karma-runner.github.io/0.8/config/coverage.html\">http://karma-runner.github.io/0.8/config/coverage.html</a></li>\n</ul>\n<p>Have fun.</p>\n","excerpt":11732,"source":"_posts/quality-analysis-on-node.js-projects-with-mocha-istanbul-and-sonar.md","slug":"quality-analysis-on-node.js-projects-with-mocha-istanbul-and-sonar","ctime":"2013-06-25T13:36:12.000Z","mtime":"2013-06-25T13:36:12.000Z","twitter_card":"summary","twitter_image":"https://dl.dropboxusercontent.com/u/17657227/Info/blog/dashboard.png"},"5":{"id":0,"title":"Plug your Minitel on your Raspberry Pi","date":"2013-05-20T11:07:21.000Z","updated":"2013-05-20T14:29:57.000Z","categories":[],"tags":[13,9],"comments":true,"layout":"post","content":"<p>Hi,</p>\n<p>So what is a Minitel? According to Wikipedia :</p>\n<blockquote>\n<p>The Minitel was a Videotex online service accessible through telephone lines, and is considered one of the world&#39;s most successful pre-World Wide Web online services.<a href=\"http://en.wikipedia.org/wiki/Minitel\">¹</a> </p>\n</blockquote>\n<p>This service was accessible through particular devices. They had a screen, a keyboard and a modem.</p>\n<p><img src=\"https://dl.dropboxusercontent.com/u/17657227/Info/blog/minitel.jpg\" alt=\"\"></p>\n<p>A screen and a keyboard are just what we need for our Pi, so let&#39;s plug them together!</p>\n<h1>Minitel and serial communication</h1>\n<p>The Minitel have a serial port. It&#39;s goal is to communicate to peripherals such as a printer or whatever.</p>\n<p>The socket is a classic 180° DIN with 5 pins :</p>\n<p><img src=\"https://dl.dropboxusercontent.com/u/17657227/Info/blog/dinMinitel.JPG\" alt=\"\"></p>\n<p>Here is the description of the pins:</p>\n<ul>\n<li>1: Rx: data reception </li>\n<li>2: Ground</li>\n<li>3: Tx: data transmission</li>\n<li>4: Ready to work signal</li>\n<li>5: 8.5v - 1A power supply</li>\n</ul>\n<p>So pins 1,2 and 3 are what we need to communicate through serial with the Pi.</p>\n<p>Please note that not all Minitels have this kind of sockets. To find a compatible one, the Minitel must have this socket AND two special keys on the keyboard <code>Fnct</code> and <code>Ctrl</code>. They are usualy called <em>Minitel 1B</em>.</p>\n<h1>TTL levels and the Pi</h1>\n<p>The UART on the Pi works with 0v and 3.3v. But a lot of old stuff use 0v and 5v. This is the case of the Minitel, so we need to adapt the voltage levels :</p>\n<ul>\n<li>Lower the Tx level of the Minitel from 5v to 3.3v</li>\n<li>Raise the Tx level of the Pi from 3.3v to 5v</li>\n</ul>\n<p>To achieve that, I used the following schema based on the recommendation of <a href=\"https://twitter.com/lhuet35\">@lhuet35</a> (thanks!). You can check its Devoxx presentation (in french) here : <a href=\"http://parleys.com/play/51599a1ee4b0ffdd7e058b6b/chapter0/about\">3615 Cloud</a></p>\n<p><img src=\"https://dl.dropboxusercontent.com/u/17657227/Info/blog/minitel.png\" alt=\"\"></p>\n<p>Be careful, the unused pin between the 5v and the GND of the Pi is not depicted on this schema!!</p>\n<p>Here is the stuff mounted on a breadboard :</p>\n<p><img src=\"https://dl.dropboxusercontent.com/u/17657227/Info/blog/minitelProto.JPG\" alt=\"\"></p>\n<h1>Configure a tty on the UART</h1>\n<p>You then need to configure a tty that will communicate through the UART.</p>\n<p>The following configuration is based on a Raspbian, but it should be the same on other distros.</p>\n<ul>\n<li>You may need to install <code>getty</code> :<ul>\n<li><code>sudo apt-get install getty</code></li>\n</ul>\n</li>\n<li>Backup the <code>/boot/cmdline.txt</code> file just in case :)<ul>\n<li><code>sudo cp /boot/cmdline.txt /boot/cmdline.bak.txt</code></li>\n</ul>\n</li>\n<li>Edit the file: <ul>\n<li><code>sudo vim /boot/cmdline.txt</code> </li>\n<li>and remove everything related to the serial port <code>ttyAMA0</code>, i.e. : <code>console=ttyAMA0,115200 kgdboc=ttyAMA0,115200</code></li>\n</ul>\n</li>\n<li>Add a <code>getty</code> conf on <code>/etc/inittab</code> :<ul>\n<li><code>7:2345:respawn:/sbin/getty ttyAMA0 4800v23</code></li>\n<li>also check there is no other <code>getty</code> conf for this tty on the file</li>\n</ul>\n</li>\n<li>Then you need to create a <code>gettydefs</code> file (or edit it)<ul>\n<li><code>sudo vim /etc/gettydefs</code></li>\n<li>and add the following <code>4800v23# B4800 CS7 PARENB -PARODD GLOBAL # B4800 ISTRIP CS7 PARENB -PARODD GLOBAL BRKINT IGNPAR ICRNL IXON IXANY OPOST ONLCR CREAD HUPCLISIG ICANON ECHO ECHOE ECHOK #@S login: #4800v23</code> on one line!</li>\n<li>this will configure the tty on UART</li>\n</ul>\n</li>\n</ul>\n<p>You can now plug the Pi to the Minitel and reboot the Pi.</p>\n<h1>Configure the Minitel</h1>\n<p>You need to switch the Minitel mode to be able to communicate through the serial port.</p>\n<ul>\n<li>Power on the Minitel</li>\n<li>Press <code>Fnct+T</code> then <code>A</code> : the Minitel will switch to the serial mode</li>\n<li>Press <code>Fnct+P</code> then <code>4</code> : the Minitel now communicate through serial at 4800bps (the max speed)</li>\n<li>Press <code>Fnct+T</code> then <code>E</code> : to deactivate the local echo</li>\n<li>Press <code>↵</code> and you should now see the login prompt (maybe with some white squares), put your login and you&#39;re done!</li>\n</ul>\n<p>Be aware that you&#39;ll need to do this Minitel configuration everytime you power it up.</p>\n<p>Here is a pic of my Minitel :</p>\n<p><img src=\"https://dl.dropboxusercontent.com/u/17657227/Info/blog/piMinitel.JPG\" alt=\"\"></p>\n<p>Happy coding!</p>\n","excerpt":4741,"source":"_posts/plug-your-minitel-on-your-raspberry-pi.md","slug":"plug-your-minitel-on-your-raspberry-pi","ctime":"2013-05-20T14:29:57.000Z","mtime":"2013-05-20T14:29:57.000Z","twitter_image":"https://dl.dropboxusercontent.com/u/17657227/Info/blog/minitel.png"},"6":{"id":0,"title":"Interfacing Leap Motion with Arduino thanks to Node.js","date":"2013-06-25T13:49:38.000Z","updated":"2013-07-26T11:03:56.000Z","categories":[],"tags":[13,2,14],"comments":true,"layout":"post","content":"<p>What about controlling physical things by waving your hands?</p>\n<p>Thanks to the Leap Motion, Arduino and a bit of Node.js magic it&#39;s pretty simple!</p>\n<p>Let&#39;s check that!</p>\n<h1>Leap Motion</h1>\n<p>There is a nice feature in the SDK of the Leap Motion: the websocket server.</p>\n<p>When activated, the Leap Motion software streams the tracking data over it. You then just need to connect your software to it and you&#39;re ready to analyse these data.</p>\n<p>Go to the Leap Motion controller settings, and then in the WebSocket tab and activate it.</p>\n<p><img src=\"https://dl.dropboxusercontent.com/u/17657227/Info/blog/leapWebSocket.png\" alt=\"\"></p>\n<p>The websocket server is now accessible at the following adress: <code>ws://127.0.0.1:6437</code></p>\n<h1>Connect your Node.js application to the websocket server</h1>\n<p>Node.js is amazing, and connecting your app to the Leap Motion websocket server is just a matter of 2 lines.</p>\n<p>In your project, install the <code>ws</code> library with <code>npm install ws --save</code></p>\n<p>And then you can check everything is working with this simple code:</p>\n<figure class=\"highlight\"><pre><span class=\"title\">var</span> webSocket = require('ws'),\n    ws = new webSocket('ws://<span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6437</span>');\n\n<span class=\"title\">ws</span>.on('message', function(<span class=\"typedef\"><span class=\"keyword\">data</span>, flags) <span class=\"container\">{\n    <span class=\"title\">console</span>.<span class=\"title\">log</span>(<span class=\"title\">data</span>);\n}</span>);</span>\n</pre></figure>\n\n<p>When running this script, it should log the data coming from the websocket. If so, you are ok!</p>\n<p>It is then just a matter of parsing the data and take what you need in it!</p>\n<p>Here you can find an example of a frame: <a href=\"https://gist.github.com/xseignard/5858797\">frame.json</a></p>\n<h1>Arduino</h1>\n<p>So you have now all the data you need from the Leap Motion, how can you pass it to the Arduino? Node.js is again the answer!</p>\n<p>Thanks to the marvelous <a href=\"https://github.com/rwldrn/johnny-five\">johnny-five</a> library, you can talk to the Arduino directly from Node.js! To achieve that, you&#39;ll just need to upload the Standard Firmata on your Arduino.</p>\n<p>Open the Arduino IDE, open the <code>File&gt;Examples&gt;Firmata&gt;StandardFirmata</code> and upload it to your Arduino.</p>\n<p>You can now use <code>johnny-five</code> to communicate with the Arduino.</p>\n<p>Install it: <code>npm install johnny-five --save</code>. Below is a snippet to connect your board and make the led that is tied to the pin 13 blink.</p>\n<figure class=\"highlight\"><pre><span class=\"reserved\">var</span> five = require(<span class=\"string\">'johnny-five'</span>),\n    board = <span class=\"keyword\">new</span> five.Board(),\n    led;\n\nboard.<span class=\"literal\">on</span>(<span class=\"string\">'ready'</span>, <span class=\"reserved\">function</span>() {\n    led = <span class=\"keyword\">new</span> five.Led(<span class=\"number\">13</span>);\n    led.strobe();\n});\n</pre></figure>\n\n<p>Easy isn&#39;t it?</p>\n<h1>Plug all this together</h1>\n<p>It&#39;s now really easy to plug all this together. Let&#39;s try to make a simple example that turns on the led when the Leap Motion sees 2 hands, and turns it off when not. You should take a look to the sample frame once more: <a href=\"https://gist.github.com/xseignard/5858797\">frame.json</a>. </p>\n<figure class=\"highlight\"><pre><span class=\"title\">var</span> webSocket = require('ws'),\n    ws = new webSocket('ws://<span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6437</span>'),\n    five = require('johnny-five'),\n    board = new five.<span class=\"type\">Board</span>(),\n    led, frame;\n\n<span class=\"title\">board</span>.on('ready', function() {\n    led = new five.<span class=\"type\">Led</span>(<span class=\"number\">13</span>);    \n    ws.on('message', function(<span class=\"typedef\"><span class=\"keyword\">data</span>, flags) <span class=\"container\">{\n        <span class=\"title\">frame</span> = <span class=\"type\">JSON</span>.<span class=\"title\">parse</span>(<span class=\"title\">data</span>); \n        <span class=\"title\">if</span> (<span class=\"title\">frame</span>.<span class=\"title\">hands</span> && <span class=\"title\">frame</span>.<span class=\"title\">hands</span>.<span class=\"title\">length</span> &gt; 1) {\n            <span class=\"title\">led</span>.<span class=\"title\">on</span>();\n        }</span></span>\n        <span class=\"keyword\">else</span> {\n            led.off();\n        }\n    });\n});\n</pre></figure>\n\n<p>That&#39;s it! (I hope so, it&#39;s not tested :))</p>\n<h1>Going further</h1>\n<p>Here is the demo I made few weeks ago:</p>\n<iframe src=\"http://player.vimeo.com/video/68530396\" width=\"700\" height=\"393\" frameborder=\"0\" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>\n\n<p>You can find the code on github: <a href=\"https://github.com/xseignard/leapLamp\">leapLamp</a>, feel free to use it and/or ask for some help.</p>\n<p>Happy coding.</p>\n","excerpt":0,"source":"_posts/interfacing-leap-motion-with-arduino-thanks-to-nodejs.md","slug":"interfacing-leap-motion-with-arduino-thanks-to-nodejs","ctime":"2013-07-26T11:03:56.000Z","mtime":"2013-07-26T11:03:56.000Z"},"_primary":7},"pages":{"_primary":1},"categories":{"_primary":1},"tags":{"1":{"name":"github","slug":"github","posts":[1]},"2":{"name":"node","slug":"node","posts":[1,3,4,6]},"3":{"name":"travis","slug":"travis","posts":[1]},"4":{"name":"heroku","slug":"heroku","posts":[1]},"5":{"name":"js","slug":"js","posts":[3]},"6":{"name":"bower","slug":"bower","posts":[3]},"7":{"name":"processing","slug":"processing","posts":[2]},"8":{"name":"java","slug":"java","posts":[2]},"9":{"name":"raspberry","slug":"raspberry","posts":[2,5]},"10":{"name":"mocha","slug":"mocha","posts":[4]},"11":{"name":"istanbul","slug":"istanbul","posts":[4]},"12":{"name":"sonar","slug":"sonar","posts":[4]},"13":{"name":"DIY","slug":"DIY","posts":[5,6]},"14":{"name":"leapmotion","slug":"leapmotion","posts":[6]},"15":{"name":"diy","slug":"diy","posts":[6]},"_primary":16},"assets":{"1":{"source":"themes/custom/source/fancybox/blank.gif","mtime":"2013-02-18T14:00:18.000Z"},"2":{"source":"themes/custom/source/fancybox/fancybox_loading.gif","mtime":"2013-02-18T14:00:18.000Z"},"3":{"source":"themes/custom/source/fancybox/fancybox_overlay.png","mtime":"2013-02-18T14:00:18.000Z"},"4":{"source":"themes/custom/source/fancybox/fancybox_sprite.png","mtime":"2013-02-18T14:00:18.000Z"},"5":{"source":"themes/custom/source/fancybox/jquery.fancybox.css","mtime":"2013-02-18T14:00:18.000Z"},"6":{"source":"themes/custom/source/fancybox/jquery.fancybox.pack.js","mtime":"2013-02-18T14:00:18.000Z"},"7":{"source":"themes/custom/source/favicon.png","mtime":"2013-02-19T01:23:11.000Z"},"8":{"source":"themes/custom/source/js/moment.min.js","mtime":"2013-02-18T14:00:18.000Z"},"9":{"source":"themes/custom/source/js/jquery.imagesloaded.min.js","mtime":"2013-02-18T14:00:18.000Z"},"10":{"source":"themes/custom/source/js/gallery.js","mtime":"2013-02-18T14:00:18.000Z"},"11":{"source":"themes/custom/source/js/twitter.js","mtime":"2013-08-05T13:16:41.000Z"},"12":{"source":"themes/custom/source/css/style.styl","mtime":"2013-02-18T14:00:18.000Z"},"13":{"source":"themes/custom/source/css/font/fontawesome-webfont.eot","mtime":"2013-02-18T14:00:18.000Z"},"14":{"source":"themes/custom/source/css/font/fontawesome-webfont.svg","mtime":"2013-02-18T14:00:18.000Z"},"15":{"source":"themes/custom/source/css/font/fontawesome-webfont.ttf","mtime":"2013-02-18T14:00:18.000Z"},"16":{"source":"themes/custom/source/css/font/fontawesome-webfont.woff","mtime":"2013-02-18T14:00:18.000Z"},"17":{"source":"themes/custom/source/css/images/bg.png","mtime":"2013-01-27T13:02:04.000Z"},"_primary":18}}